generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int       @map("user_id")
  expiredAt DateTime  @map("expired_at")
  createdAt DateTime  @default(now()) @map("created_at")
  type      TokenType @default(REFRESH)

  @@map("tokens")
}

model InvitationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  projectId Int      @map("project_id")
  expiredAt DateTime @map("expired_at")
  createdAt DateTime @default(now()) @map("created_at")
  roleId    Int      @map("role_id")

  @@unique([userId, projectId])
  @@index([userId, projectId])
  @@map("invitation_tokens")
}

model SystemUser {
  id        Int             @id @default(autoincrement())
  username  String          @unique
  password  String
  role      SystemUserRole? @default(MEMBER)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @default(now()) @updatedAt @map("updated_at")

  @@map("system_users")
}

model User {
  id                Int             @id @default(autoincrement())
  githubId          String?         @unique @map("github_id")
  githubUsername    String?         @map("github_username")
  githubAccessToken String?         @map("github_access_token")
  username          String
  password          String
  avatar            String?
  phoneNumber       String          @map("phone_number")
  address           String?
  fullname          String
  email             String          @unique
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @default(now()) @updatedAt @map("updated_at")
  Notification      Notification[]
  ProjectMembers    ProjectMember[]
  ReportComment     ReportComment[]
  AssigneeReport    Report[]        @relation("AssigneeReports")
  CreatedReport     Report[]        @relation("CreatedReports")
  Tag               Tag[]

  @@map("users")
}

model Project {
  id               Int             @id @default(autoincrement())
  name             String
  description      String
  githubId         Int?            @unique @map("github_id")
  githubName       String?         @map("github_name")
  githubURL        String?         @map("github_url")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @updatedAt @map("updated_at")
  projectThumbnail String?         @map("project_thumbnail")
  Category         Category[]
  Phase            Phase[]
  projectMembers   ProjectMember[]
  ProjectDomain    ProjectDomain[]
  Report           Report[]
  roles            Role[]
  Status           Status[]
  Tag              Tag[]

  @@map("projects")
}

model ProjectDomain {
  id        Int     @id @default(autoincrement())
  name      String
  url       String  @unique
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_urls")
}

model Phase {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  from        DateTime
  to          DateTime
  projectId   Int      @map("project_id")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Report      Report[]
  Task        Task[]

  @@map("phases")
}

model AutoAssign {
  id         Int              @id @default(autoincrement())
  issueType  ReportIssueType? @map("issue_type")
  assignedTo Int?             @map("assigned_to")
  Assignee   ProjectMember?   @relation(fields: [assignedTo], references: [id])

  @@map("auto_assign")
}

model Role {
  id             Int             @id @default(autoincrement())
  category       ProjectRole
  name           String
  projectId      Int             @map("project_id")
  ProjectMembers ProjectMember[]
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("roles")
}

model Status {
  id            Int     @id @default(autoincrement())
  name          String
  projectId     Int     @map("project_id")
  color         String  @default("#f1f1f1") @db.Char(7)
  isCloseStatus Boolean @default(false)
  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Task          Task[]

  @@map("status")
}

model Category {
  id        Int     @id @default(autoincrement())
  name      String
  projectId Int     @map("project_id")
  color     String  @default("#f1f1f1") @db.Char(7)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Task      Task[]

  @@map("categories")
}

model ProjectMember {
  id            Int           @id @default(autoincrement())
  userId        Int           @map("user_id")
  roleId        Int?          @map("role_id")
  projectId     Int           @map("project_id")
  AutoAssign    AutoAssign[]
  File          File[]
  Folder        Folder[]
  project       Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role          Role?         @relation(fields: [roleId], references: [id])
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  TaskComment   TaskComment[]
  TasksAssigned Task[]        @relation("AssignedTasks")
  TasksCreated  Task[]        @relation("CreatedTasks")

  @@unique([userId, projectId])
  @@index([userId, projectId])
  @@map("project_members")
}

model Task {
  id             Int              @id @default(autoincrement())
  description    String
  estimateTime   Float?           @map("estimate_time")
  deadline       DateTime?
  priority       Priority?
  isPublic       Boolean          @default(true) @map("is_public")
  statusId       Int?             @map("status_id")
  categoryId     Int?             @map("category_id")
  references     String[]
  createdBy      Int              @map("created_by")
  projectId      Int              @map("project_id")
  assignedTo     Int?             @map("assigned_to")
  tags           Int[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  name           String
  reportId       Int?
  phaseId        Int?
  type           TaskType         @default(DEFAULT)
  TaskAttachment TaskAttachment[]
  TaskComment    TaskComment[]
  Assignee       ProjectMember?   @relation("AssignedTasks", fields: [assignedTo], references: [id])
  category       Category?        @relation(fields: [categoryId], references: [id])
  ProjectMember  ProjectMember    @relation("CreatedTasks", fields: [createdBy, projectId], references: [userId, projectId], onDelete: Cascade)
  Phase          Phase?           @relation(fields: [phaseId], references: [id])
  Report         Report?          @relation(fields: [reportId], references: [id])
  status         Status?          @relation(fields: [statusId], references: [id])
  IssueGithub    IssueGithub?

  @@map("tasks")
}

model IssueGithub {
  taskId   Int    @unique
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  githubId Int    @unique @map("github_id")
  url      String
}

model Folder {
  id            Int           @id @default(autoincrement())
  name          String
  createdBy     Int           @map("created_by")
  projectId     Int           @map("project_id")
  isPublic      Boolean       @default(true) @map("is_public")
  parentId      Int?          @map("parent_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  tags          Int[]
  File          File[]
  projectMember ProjectMember @relation(fields: [createdBy, projectId], references: [userId, projectId], onDelete: Cascade)
  parent        Folder?       @relation("FolderSelfReference", fields: [parentId], references: [id], onDelete: Cascade)
  Folder        Folder[]      @relation("FolderSelfReference")

  @@map("folder")
}

model File {
  id             Int              @id @default(autoincrement())
  name           String
  path           String
  folderId       Int              @map("folder_id")
  createdBy      Int              @map("created_by")
  projectId      Int              @map("project_id")
  tags           Int[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  projectMember  ProjectMember    @relation(fields: [createdBy, projectId], references: [userId, projectId], onDelete: Cascade)
  folder         Folder           @relation(fields: [folderId], references: [id], onDelete: Cascade)
  TaskAttachment TaskAttachment[]

  @@map("files")
}

model TaskAttachment {
  id     Int  @id @default(autoincrement())
  fileId Int  @map("file_id")
  taskId Int  @map("task_id")
  file   File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

model TaskComment {
  id            Int           @id @default(autoincrement())
  content       String
  createdBy     Int           @map("created_by")
  projectId     Int           @map("project_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  taskId        Int
  projectMember ProjectMember @relation(fields: [createdBy, projectId], references: [userId, projectId], onDelete: Cascade)
  task          Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}

model Report {
  id               Int              @id @default(autoincrement())
  type             ReportType       @default(BUG)
  severity         Severity?
  isPublic         Boolean          @default(true) @map("is_public")
  createdById      Int              @map("created_by_id")
  projectId        Int              @map("project_id")
  assignedTo       Int?             @map("assigned_to")
  description      String
  additionInfo     Json             @map("additionInfo")
  tags             Int[]
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at")
  name             String
  url              String
  status           ReportStatus     @default(INIT)
  actualResult     String?          @map("actual_result")
  expectedBehavior String?          @map("expected_behavior")
  issueType        ReportIssueType? @map("issue_type")
  stepsToReproduce String?          @map("steps_to_reproduce")
  isProcessing     Boolean          @default(false) @map("is_processing")
  phaseId          Int?
  DuplicateGroup1  DuplicateGroup[] @relation("DuplicateReport1")
  DuplicateGroup2  DuplicateGroup[] @relation("DuplicateReport2")
  ReportComment    ReportComment[]
  ReportImage      ReportImage[]
  assignee         User?            @relation("AssigneeReports", fields: [assignedTo], references: [id])
  createdBy        User             @relation("CreatedReports", fields: [createdById], references: [id], onDelete: Cascade)
  Phase            Phase?           @relation(fields: [phaseId], references: [id])
  project          Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Task             Task[]
  parentId         Int?
  parent           Report?          @relation("MergeRelation", fields: [parentId], references: [id], onDelete: SetNull)
  children         Report[]         @relation("MergeRelation")

  @@map("reports")
}

model ReportComment {
  id          Int      @id @default(autoincrement())
  content     String
  createdById Int      @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  reportId    Int
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_comments")
}

model ReportImage {
  id       Int    @id @default(autoincrement())
  name     String
  path     String
  reportId Int    @map("report_id")
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_images")
}

model Tag {
  id          Int      @id @default(autoincrement())
  projectId   Int      @map("project_id")
  tagType     TagType? @default(PUBLIC)
  createdById Int      @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at")
  available   Boolean  @default(false)
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tag")
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model DuplicateGroup {
  id        Int            @id @default(autoincrement())
  level     DuplicateLevel @default(LOW)
  reportId1 Int
  reportId2 Int
  report1   Report         @relation("DuplicateReport1", fields: [reportId1], references: [id], onDelete: Cascade)
  report2   Report         @relation("DuplicateReport2", fields: [reportId2], references: [id], onDelete: Cascade)
}

enum SystemUserRole {
  ADMIN
  MEMBER
  DEV
}

enum ProjectRole {
  MEMBER
  GUEST
  OWNER
}

enum ReportType {
  BUG
  FEEDBACK
  WISH
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  IMMEDIATE
}

enum Severity {
  INFO
  LOW
  MEDIUM
  HIGH
}

enum TagType {
  INTERNAL
  PUBLIC
}

enum ReportStatus {
  INIT
  CONFIRMING
  IN_PROCESSING
  REJECTED
  DONE
}

enum ReportIssueType {
  UI
  FUNCTIONAL
  PERFORMANCE
  SECURITY
  NETWORK
  DATA
  OTHER
}

enum TokenType {
  REFRESH
  RECOVER
}

enum DuplicateLevel {
  LOW
  MEDIUM
  HIGH
}

enum reportissuetype {
  UI
  FUNCTIONAL
  PERFORMANCE
  SECURITY
  NETWORK
  DATA
  OTHER
}

enum reportstatus {
  INIT
  CONFIRMING
  IN_PROCESSING
  REJECTED
  DONE
}

enum reporttype {
  BUG
  FEEDBACK
  WISH
}

enum severity {
  INFO
  LOW
  MEDIUM
  HIGH
}

enum TaskType {
  GITHUB
  DEFAULT
}
